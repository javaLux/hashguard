name: CD

on:
  release:
    types:
      - created # Trigger this workflow only when a new release is created

permissions:
  contents: write
  checks: write
  actions: read
  issues: read
  packages: write
  pull-requests: read
  repository-projects: read
  statuses: read

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            targets: x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu
            package_formats:
              - { name: gnu-linux-x86_64.tar.gz, cmd: tar -czvf }
              - { name: gnu-linux-aarch64.tar.gz, cmd: tar -czvf }
          - os: macos-latest
            targets: x86_64-apple-darwin aarch64-apple-darwin
            package_formats:
              - { name: macos-x86_64.tar.gz, cmd: tar -czvf }
              - { name: macos-aarch64.tar.gz, cmd: tar -czvf }
          - os: windows-latest
            targets: x86_64-pc-windows-msvc aarch64-pc-windows-msvc
            package_formats:
              - { name: windows-x86_64.zip, cmd: zip -j }
              - { name: windows-aarch64.zip, cmd: zip -j }
              
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && apt-get dist-upgrade -y
        shell: bash

      - name: Install Rust targets
        run: rustup target add ${{ matrix.targets }}
        shell: bash

      - name: Build the executable (Linux/MacOS)
        if: matrix.os != 'windows-latest'
        run: |
          for target in ${{ matrix.targets }}; do
            cargo build --release --target=$target
          done
        shell: bash

      - name: Build the executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $targets = "${{ matrix.targets }}" -split " "
          foreach ($target in $targets) {
            cargo build --release --target=$target
          }
        shell: pwsh

      - name: Build release name
        run: |
          PKG_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          PKG_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          RELEASE_NAME="${PKG_NAME}_${PKG_VERSION}"
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Package binaries (Linux/MacOS)
        if: matrix.os != 'windows-latest'
        run: |
          PKG_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          for format in "${{ matrix.package_formats }}"; do
            EXTENSION=$(echo "$format" | jq -r '.name')
            CMD=$(echo "$format" | jq -r '.cmd')
            TARGET=$(echo "$EXTENSION" | awk -F'-' '{print $NF}' | sed 's/\.tar\.gz//;s/\.zip//')
            $CMD ${{ env.RELEASE_NAME }}-$EXTENSION -C target/${TARGET}/release ${PKG_NAME}
          done
        shell: bash

      - name: Package binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $PKG_NAME = $(cargo metadata --no-deps --format-version 1 | ConvertFrom-Json).packages[0].name
          $formats = "${{ matrix.package_formats }}" | ConvertFrom-Json
          foreach ($format in $formats) {
            $EXTENSION = $format.name
            $CMD = $format.cmd
            $TARGET = $EXTENSION -split "-" | Select-Object -Last 1 -replace '\.zip', ''
            Invoke-Expression "$CMD ${{ env.RELEASE_NAME }}-$EXTENSION target/$TARGET/release/$PKG_NAME.exe"
          }
        shell: pwsh

      - name: Generate SHA256 checksums
        run: |
          for format in "${{ toJson(matrix.package_formats) }}"; do
            EXTENSION=$(echo "$format" | jq -r '.name')
            shasum -a 256 ${{ env.RELEASE_NAME }}-$EXTENSION > ${{ env.RELEASE_NAME }}-$EXTENSION.sha256
          done
        shell: bash

      - name: Upload release binaries
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          files: |
            ${{ env.RELEASE_NAME }}-*
